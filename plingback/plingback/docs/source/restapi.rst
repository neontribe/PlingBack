========================
The Plingback Input API
========================

Overview
********

    The Plingback Input API exposes a RESTful interface which allows the 
    submission of feedback about a Pling through the use of standard HTTP
    actions such as POST and PUT. The submitted data is parsed, structured
    as triples using the ontologies set out here, and stored in a triplestore
    (currently on the talis platform).
    
    A minimal example of an HTML form which could be used to submit a comment
    about pling 67885 follows
    
    .. code-block:: html
    
        <form action="http://plingback.appspot.com/api/plingbacks"
              method="post">
              
            <input type="hidden" name="pling_id" value="67885"/>
            <input type="hidden" name="plingback_type" value="Example Form"/>
            <input type="hidden" name="feedback_attribute" value="comment"/>
            
            <input type="text" name="comment_value" />
            <input type="submit" value="Save" />
        </form>

.. _feedback-identifiers-label:

Feedback Identifiers
********************

    Each piece of submitted feedback requires a unique identifier. 
    
    The work of
    generating this identifier can be done by the submitting client, in which
    case it is expected that the identifier will conform to the UUID standards. 
    The javascript function which is used in the example clients is as follows
    
    .. code-block:: javascript
    
        /**
        * genUUID is taken from 
        * Math.uuid.js (v1.4)
        * http://www.broofa.com
        * mailto:robert@broofa.com
        */
        pb.utils.genUUID = function() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
                return v.toString(16);
            }).toUpperCase();
        };
    
    
    Where a unique identifier is not provided the api will generate one which it
    will return in the response. The api uses the Primary Key Pattern
    (http://n2.talis.com/wiki/Primary_Key_Pattern) to generate this id, 
    though in some cases it may choose return a UUID as generated by python's 
    uuid.uuid4()

Submitting Feedback
*******************

    Feedback data is submitted to the API via http POST or http PUT. Feedback
    can be submitted in a single glob, or a feedback node can be initialized and
    then augmented with additional feedback data in subsequent requests.
    
    If the submitting client wishes to control the identifier used for the 
    feedback node it should make an http PUT request to the url::
    
        http://plingback.appspot.com/api/plingbacks/NODE_UUID
        
    If, on the other hand the client wishes the api to take responsibility for
    the generation of a feedback id it should make an http POST request to the
    url::
    
        http://plingback.appspot.com/api/plingbacks
        
Required Request Parameters
---------------------------

    The request **should always** contain the following parameters:
    
    * ``pling_id`` - the plings identifier for the activity the feedback 
        refers to.
    * ``plingback_type`` - A string identifying the plingback client which
        is submitting the data. e.g. 'fastfeedback'

Optional Request Parameters
---------------------------

    The request **may** contain the following parameters:
    
    * ``plingback_version`` - A string identifying the version of the plingback
        client identified in ``plingback_type``. e.g. '0.5 beta'
    * ``submission_date`` - A string in iso-8610 format representing the datetime
        when the feedback was submitted. Useful for bulk-loading historical data. 
        When ommited the datetime of the api request will be used.

Feedback Attribute Parameters
-----------------------------

    Once the data required to initialize a feedback node has been extracted from
    the request the request will be parsed to discover any feedback data which
    is to be attached to the node. The presence of feedback data is signalled 
    by ``feedback_attribute`` request parameters. A request may contain any 
    number of ``feedback_attribute`` parameters.
    
    Currently supported feedback attribute values are:
    
        * ``attendance`` - used to record whether the respondant attended or
            intends to attend the activity
        * ``deterrent`` - used to record the respondant's reasons for not attending
        * ``rating`` - used to record the respondant's rating for the activity
        * ``comment`` - used to record a textual comment from the respondant
            about the activity
        * ``approval`` - used to record a mark of approval such as a 'vote', 'thumbs up', or 'like'
        * ``reviewer`` - used to record details about the 
            identity/characteristics of the respondant
    
    When a ``feedback_attribute`` is detected the request is examined to find
    the data required to populate the attribute indicated by the value of the 
    feedback_attribute.
    
    The data-bearing parameters for each feedback attribute type are set out
    below.

.. _attendance-label:

Attendance
..........

    The **attendance** attribute records information about the respondant's 
    attendance (or intentions regarding attendance) at the activity.
    
        ``attendance_value`` - Any value may be supplied, but the standard
        values are:
        
            * ``attended``
            * ``didNotAttend``
            * ``mayAttend``
            * ``willAttend``
            * ``willNotAttend``
            
Deterrent
.........

    The **deterrent** attribute records the respondant's reasons for not attending
    the activity.
    
        ``deterrent_value`` = Any value may be supplied, but the values in current
        use are:
        
            * ``transport``
            * ``cost``
            * ``publicity``
            * ``timing``
            * ``apathy``

Rating
......

    The **rating** attribute records information about the respondant's rating
    for the activity.
    
        ``rating_value`` - Any value may be supplied, but it is recommended that
        all ratings be expressed as values between 0 and 100. A conventional 
        five-star rating input, therefore, might submit the values 0, 20, 40, 60,
        80 and 100 for zero, one, two, three, four and five stars respectively.

.. _comment-label:

Comment
.......

    The **comment** attribute records a textual comment about the activity.
    
        ``comment_value`` - Any text value is accepted and the api does not 
        currently impose any restrictions on the length or content of comments.

 .. _approval-label:
        
Approval
........

    The **approval** attribute records a mark of approval for the activity. An
    approval  attribute might represent a 'Favorite', a 'Like' or a 'Vote' etc.
    
        ``approval_value`` - Any numeric value is supported though in most cases
        1 is appropriate. Please don't attempt to combine may approvals into a single argument here
        as this may not be reflected appropriately by the output api. 

Reviewer
........

    The **reviewer** attribute records information about the identity of the
    respondant. If a ``feedback_atribute`` with a value of ``reviewer`` is 
    present in the request data will be stored for any of the following keys. It
    is expected that any combination of keys may be present. Though it should be 
    noted that ``reviewer_id`` and ``reviewer_id_source`` are mutually dependent.
    
        * ``reviewer_email`` - any valid email address is acceptable. e.g. 'pling_lover@example.com'
        * ``reviewer_phone`` - anything which looks like a telephone number is acceptable. e.g. '+44 7990 665432'
        * ``reviewer_birthday`` - A string representation of a date. e.g. '10/06/1971'
        * ``rewiever_id`` - An unique identifier for the respondant which allows them to be looked up on the online service supplied as ``reviewer_id_source``. e.g. '10000776554'(see data structures for more detail)
        * ``reviewer_id_source`` - An identifier (usually a URL) for the online service which provides lookup for the id specified in ``reviewer_id``. e.g. 'http://www.facebook.com' (see data structure for more detail)


Evaluating Responses
********************

    The Plingback API makes use of standard http response codes to indicate the
    status of a request. It also supplies additional context in the body of
    its response.
    
    HTTP 200 will be returned for requests which manipulate an existing feedback
    node.
    
    Requests which resulted in the creation of a new node will return HTTP 201
    with an additional 'Location' header which will give the full URI of the 
    new node.
    
    In addition, successful responses will supply some contextual data in the 
    body of the response. This data will be encoded in JSON format and the 
    content-type of the response will be set to 'application/json'
    
    Currently two keys are present in the JSON-encoded response:
    
        ``feedback_id`` - The unique identifier for the feedback node which
        has been created/manipulated. This is especially useful if a node has
        been created as a result of an HTTP POST and it is intended to augment
        the node with additional data in subsequent requests.
        
        ``feedback_uri`` - The full URI of the feedback node. Useful to clients
        which wish to store a full linked-data useable URI for the feedback data
        which was submitted.
        
    If an error condition is detected the API will return an HTTP status code 
    such as 400, 404 or 500. In such cases the body of the response will be a
    text string containing a descriptive error message. Should you encounter 
    error messages which aren't sufficiently helpful to allow you to diagnose 
    the problem please get in touch :-)
    
JSAPI - Working Around Cross Domain issues
******************************************

    Due to cross-domain http request restrictions it can be annoying to have to 
    provide a proxy to forward requests from javascript clients.
    
    To avoid this irritation an emulation layer is provided so that javascript only clients 
    can cheat.
    
    Any url path and method combination used in the rest api can be emulated through
    a specially formed GET request
    
    So to emulate a POST containing `pling_id=2345` to `/api/plingbacks` via a GET request you can do:
    
    .. code-block:: html
    
        /jsapi/post/plingbacks?pling_id=2345
    
    To emulate a PUT to `/api/plingbacks/55566/approval` with `approval_value=1` do:
    
    .. code-block:: html
    
        /jsapi/put/plingbacks/55566/approval?approval_value=1
    
    This interface supports JSONP if a callback parameter is provided.
    
Examples
********

**An HTML form for submitting an email-signed comment**

.. code-block:: html

    <form action="http://plingback.appspot.com/api/plingbacks"
          method="post">
              
        <input type="hidden" name="pling_id" value="67885"/>
        <input type="hidden" name="plingback_type" value="Example Form"/>
        <input type="hidden" name="feedback_attribute" value="comment"/>
        <input type="hidden" name="feedback_attribute" value="reviewer"/>
        
        <label for="comment">Your Comment</label>
        <input type="text" id="comment" name="comment_value" />
        
        <label for="email">Your Email</label>
        <input type="text" id="email" name="reviewer_email" />
        
        <input type="submit" value="Save" />
    </form>
    
**A (somewhat contrived) example using jQuery to initialize a feedback node with
a rating and then add data to it in a subsequent request**

.. code-block:: javascript
    
    $.ajax({
        url: 'http://plingback.appspot.com/api/plingbacks',
        type: 'POST',
        dataType: 'json',
        data: { pling_id: '67885',
                plingback_type: 'jQuery Example',
                plingback_version: '0.1',
                feedback_attribute: 'rating',
                rating_value: '60'},
                success: function (d, t, x) { var feedback_id = d.feedback_id;
                                      $.ajax({
                                        url: 'http://plingback.appspot.com/api/plingbacks' + '/' + feedback_id,
                                        type: 'PUT',
                                        dataType: 'json',
                                        data: {pling_id: '67885',
                                               plingback_type: 'jQuery Example',
                                               plingback_version: '0.1',
                                               feedback_attribute: 'reviewer',
                                               reviewer_email: 'pling_lover@example.com'},
                                        success: function (d, t, x) { alert('Done!'); },
                                        error: function (x, t, e) { alert('Oops: ' + e.msg); }
                                        });
                                      },
        error: function (x, t, e) { alert('Oops: ' + e.msg); }
    });
    
.. _radiowaves-label:

**Example Requests to load tabular data from RadioWaves**

Take a comment row such as:

.. code-block:: html

  "550403","Yeah,well wanna do this! :)","2010-06-30 11:36:39.000"
  
To register an anonymous feedback node including that data and recording that
the data originated as a radiowaves comment we might use curl as below 
(lines split for readability) (see :ref:`comment-label`):

.. code-block:: javascript

  $ curl --data "pling_id=550403
                       &plingback_type=radiowaves-import
                       &feedback_attribute=comment
                       &comment_value=Yeah%2Cwell+wanna+do+this%21+%3A%29
                       &submission_date=2011-03-03T14%3A40%3A50" 
             http://plingback.appspot.com/api/plingbacks
  
To examine the result you can currently visit http://plingback.appspot.com/api/plingbacks/<feedback_id>.html
Where `feedback_id` can be found in the JSON returned by the api to confirm success.

The "Attending" and "Maybe Attending" records from radiowaves can be modelled using the 
`attendance` attribute (see :ref:`attendance-label`):

.. code-block:: javascript

  $ curl --data "pling_id=477008
                       &plingback_type=radiowaves-import
                       &feedback_attribute=attendance
                       &attendance_value=willAttend
             http://plingback.appspot.com/api/plingbacks
             
Radiowaves "Like" counts can be modelled using the :ref:`approval-label` attribute. 
Please note that data such as that supplied by Radiowaves will need to be dis-aggregated, 
so that a row like:
 
.. code-block:: html
 
   "598944","5"
   
should result in **5** requests in the following form:

.. code-block:: javascript

  $ curl --data "pling_id=598944
                       &plingback_type=radiowaves-import
                       &feedback_attribute=approval
                       &approval_value=1" 
             http://plingback.appspot.com/api/plingbacks

             





  
  






    